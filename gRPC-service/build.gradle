/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.4.1/userguide/tutorial_java_projects.html
 */
buildscript {
    dependencies {
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.12"
    }
    ext {
        cassandraUnitVersion = '3.3.0.2'
    }
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    // Apply the application plugin to add support for building a CLI application.
    id 'application'
    id "com.google.protobuf" version "0.8.12"
    id 'idea'
    // Spring
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

ext {
    grpcVersion = '1.30.0'
    protobufVersion = '3.12.3'
    protobufGradlePluginVersion = '0.8.12'
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.2-jre'
    implementation 'net.devh:grpc-server-spring-boot-starter:2.9.0.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-data-cassandra'
    implementation 'io.projectreactor:reactor-core'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    // artifact id apache API java 9 and above
    implementation "jakarta.annotation:jakarta.annotation-api:1.3.5"

    testCompile "org.cassandraunit:cassandra-unit:${cassandraUnitVersion}"
    testCompile "org.cassandraunit:cassandra-unit-spring:${cassandraUnitVersion}"
    testCompile "org.cassandraunit:cassandra-unit-shaded:${cassandraUnitVersion}"

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
    clean {
        delete generatedFilesBaseDir
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

// optional
idea {
    module {
//        sourceDirs += file("src/generated/main/java")
//        sourceDirs += file("src/generated/main/grpc")
        generatedSourceDirs += file("src/generated/main/java")
        generatedSourceDirs += file("src/generated/main/grpc")
    }
}

application {
    // Define the main class for the application.
    mainClassName = 'com.shotin.grpc.GrpcServiceApplication'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}
